import boto3
import time
import traceback


def lambda_handler(event, context):
    """
    Calling function to execute input; i.e. SQL statement against Redshift DB

    - For query submissions, provide all EVENT[] parameters, except EVENT[QUERY_ID].
    - Use NULL values for all EVENT[] parameters different than QUERY_ID, for query monitoring. Redshift only needs QUERY_ID UUID for this.

    - PENDING TO IMPROVE: mechanism to validate arguments / input params.
    """
    if event['query_id']:
        query_output = run_query(rs_cluster='', rs_db_name='', db_user='', sql_input='', query_id=event['query_id'])
    else:
        query_output = run_query(rs_cluster=event['rs_cluster'], rs_db_name=event['rs_db_name'],
                                 db_user=event['db_user'], sql_input=event['sql_input'], query_id='')

    # Return query status, including query_id and its status; e.g. running, finished:
    return query_output


def run_query(rs_cluster, rs_db_name, db_user, sql_input, query_id, sync_exec=False, aws_region='eu-west-1'):
    """
    function to execute an SQL statement, against a Redshift cluster

    rs_cluster: str
        Redshift cluster name only. Not the entire endpoint string

    db_user: str
        User to connect. Password not required, since Temporary Credentials
        method will be used

    sql_input: str
        SQL Statement, compatible with Amazon Redshift

    query_id: str
        The identifier of the SQL statement to describe.
        This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
        This identifier is returned by ExecuteStatment and ListStatements .
    """

    # AWS settings
    redshift_client = boto3.client('redshift-data', region_name=aws_region)

    try:
        if sql_input:
            # Run Redshift query; Secrets Manager is also compatible.
            redshift_response_run = redshift_client.execute_statement(
                ClusterIdentifier=rs_cluster,
                Database=rs_db_name,
                DbUser=db_user,
                Sql=sql_input,
                StatementName='SQL Query'
            )

            # Check for query status:
            redshift_response_status = redshift_client.describe_statement(
                Id=redshift_response_run['Id']
            )

            if sync_exec:
                # Sync execution: waiting for query to finish.
                # WARNING: Consider Lambda timeout!
                print('Running SQL query: \n {}'.format(sql_input))
                while redshift_response_status['Status'] == 'STARTED':
                    redshift_response_status = redshift_client.describe_statement(
                        Id=redshift_response_run['Id']
                    )
                    time.sleep(1)

            # Return query id
            query_id = redshift_response_run['Id']

        else:
            # Check for query status:
            redshift_response_status = redshift_client.describe_statement(
                Id=query_id
            )

    except Exception as e:
        print('SQL execution error: {}'.format(e))
        traceback.print_exc()

    else:
        return {
            'query_id': query_id,
            'query_submitted_status': redshift_response_status['Status']
        }
