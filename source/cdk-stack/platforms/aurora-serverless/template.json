{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Cloudformation template to provision AuroraServerless platform by Barometer",
  "Parameters": {
    "minCapacity": {
      "Description": "The minimum capacity for an Aurora DB cluster in serverless DB engine mode.",
      "Type": "Number",
      "Default": "4"
    },
    "maxCapacity": {
      "Description": "The maximum capacity for an Aurora DB cluster in serverless DB engine mode.",
      "Type": "Number",
      "Default": "32"
    },
    "engine": {
      "Description": "Aurora engine name. Can be either aurora-mysql or aurora-postgresql",
      "Type": "String",
      "AllowedValues": [
        "aurora-mysql",
        "aurora-postgresql"
      ],
      "Default": "aurora-mysql"
    }
  },
  "Conditions": {
    "IsPostgres": {
      "Fn::Equals": [
        {
          "Ref": "engine"
        },
        "aurora-postgresql"
      ]
    }
  },
  "Resources": {
    "AdminUserSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "KmsKeyId": {
          "Fn::ImportValue": "Benchmarking::KMSKey"
        },
        "Description": "Redshift admin user",
        "GenerateSecretString": {
          "SecretStringTemplate": "{\"username\": \"admin\"}",
          "GenerateStringKey": "password",
          "PasswordLength": 16,
          "ExcludeCharacters": "\"'@/\\"
        },
        "Tags": [
          {
            "Key": "ManagedBy",
            "Value": "BenchmarkingStack"
          }
        ]
      }
    },
    "AuroraSecretAttachment": {
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
      "Properties": {
        "SecretId": {
          "Ref": "AdminUserSecret"
        },
        "TargetId": {
          "Ref": "AuroraRDSCluster"
        },
        "TargetType": "AWS::RDS::DBCluster"
      }
    },
    "AuroraSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "DeletionPolicy": "Delete",
      "Properties": {
        "DBSubnetGroupDescription": "description",
        "SubnetIds": {
          "Fn::Split": [
            ",",
            {
              "Fn::ImportValue": "Benchmarking::SubnetIds"
            }
          ]
        },
        "Tags": [
          {
            "Key": "ManagedBy",
            "Value": "BenchmarkingStack"
          }
        ]
      }
    },
    "AuroraSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::ImportValue": "Benchmarking::VpcId"
        },
        "GroupDescription": "Aurora RDS SecurityGroup",
        "SecurityGroupIngress": [
          {
            "Description": "Allow benchmarking lambda to connect to Aurora RDS",
            "SourceSecurityGroupId": {
              "Fn::ImportValue": "Benchmarking::Exec::SecurityGroup"
            },
            "IpProtocol": "tcp",
            "FromPort": {
              "Fn::If": [
                "IsPostgres",
                5439,
                3306
              ]
            },
            "ToPort": {
              "Fn::If": [
                "IsPostgres",
                5439,
                3306
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "ManagedBy",
            "Value": "BenchmarkingStack"
          }
        ]
      }
    },
    "AuroraRDSCluster": {
      "Type": "AWS::RDS::DBCluster",
      "DeletionPolicy": "Delete",
      "Properties": {
        "MasterUsername": {
          "Fn::Sub": "{{resolve:secretsmanager:${AdminUserSecret}::username}}"
        },
        "MasterUserPassword": {
          "Fn::Sub": "{{resolve:secretsmanager:${AdminUserSecret}::password}}"
        },
        "Engine": {
          "Ref": "engine"
        },
        "DBSubnetGroupName": {
          "Ref": "AuroraSubnetGroup"
        },
        "VpcSecurityGroupIds": [
          {
            "Ref": "AuroraSG"
          }
        ],
        "StorageEncrypted": true,
        "KmsKeyId": {
          "Fn::ImportValue": "Benchmarking::KMSKey"
        },
        "ServerlessV2ScalingConfiguration": {
          "MinCapacity": {
            "Ref": "minCapacity"
          },
          "MaxCapacity": {
            "Ref": "maxCapacity"
          }
        },
        "Tags": [
          {
            "Key": "ManagedBy",
            "Value": "BenchmarkingStack"
          }
        ]
      }
    }
  },
  "Outputs": {
    "SecretIdAdminUser": {
      "Description": "The admin user to use for benchmarking queries",
      "Value": {
        "Fn::Sub": "${AdminUserSecret}"
      }
    }
  }
}